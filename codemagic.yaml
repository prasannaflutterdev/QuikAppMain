definitions:
  # mac_mini_m1: &mac_mini_m1
  #  instance_type: mac_mini_m1
  # max_build_duration: 60

  environment:
    app_details:
      vars:
        VERSION_NAME: $VERSION_NAME
        VERSION_CODE: $VERSION_CODE
        KEY_STORE: $KEY_STORE
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        IS_SPLASH: $IS_SPLASH
        SPLASH: $SPLASH
        SPLASH_BG: $SPLASH_BG
        SPLASH_BG_COLOR: $SPLASH_BG_COLOR
        SPLASH_TAGLINE: $SPLASH_TAGLINE
        SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
        SPLASH_ANIMATION: $SPLASH_ANIMATION
        SPLASH_DURATION: $SPLASH_DURATION
        LOGO_URL: $LOGO_URL
        WEB_URL: $WEB_URL
        firebase_config_android: $firebase_config_android
        firebase_config_ios: $firebase_config_ios
        APNS_KEY_ID: $APNS_KEY_ID
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
        CERT_URL: $CERT_URL
        CERT_PASSWORD: $CERT_PASSWORD
        PROFILE_URL: $PROFILE_URL
        PKG_NAME: $PKG_NAME
        BUNDLE_ID: $BUNDLE_ID
        EMAIL_ID: $EMAIL_ID
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_BIOMETRIC: $IS_BIOMETRIC
        IS_CALENDAR: $IS_CALENDAR
        IS_STORAGE: "true" # Always true by default
        IS_PULLDOWN: $IS_PULLDOWN
        IS_BOTTOMMENU: $IS_BOTTOMMENU
        IS_CHATBOT: $IS_CHATBOT
        BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
        BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
        BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
        BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
        BOTTOMMENU_FONT: $BOTTOMMENU_FONT
        BOTTOMMENU_FONT_SIZE: $BOTTOMMENU_FONT_SIZE
        BOTTOMMENU_FONT_BOLD: $BOTTOMMENU_FONT_BOLD
        BOTTOMMENU_FONT_ITALIC: $BOTTOMMENU_FONT_ITALIC
        BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
        BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION
        BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON
        IS_DEEPLINK: $IS_DEEPLINK
        IS_LOAD_IND: $IS_LOAD_IND

  artifacts:
    #- &ipa_file build/ios/ipa/*.ipa
    #- &xcode_log /tmp/xcodebuild_logs/*.log
    #- &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    # - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    #    - &android_abb build/**/outputs/**/*.aab
    #    - &android_apk build/**/outputs/**/*.apk
    - &android_abb build/**/outputs/**/*.aab
    - &android_apk build/**/outputs/**/*.apk
    - &ios_app build/ios/ipa/*.ipa
    #- &android_mapping_txt build/**/outputs/**/mapping.txt
    #3- &flutter_drive_log flutter_drive.log

  email_release: &email_release
    email:
      recipients:
        - $EMAIL_ID
        # - thamaraikannan137@gmail.com
      notify:
        success: true
        failure: true

  scripts:
    - &permission_apk
      name: Inject Android permissions into AndroidManifest.xml
      script: |
        TEMPLATE="android/app/src/main/AndroidManifest_template.xml"
        TARGET="android/app/src/main/AndroidManifest.xml"
        PERMISSIONS=""

        echo "üîß Checking environment flags for permission injection..."

        if [[ "$IS_CAMERA" == "true" ]]; then
          echo "üì∏ Adding CAMERA permission"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.CAMERA\" />\n"
        fi

        if [[ "$IS_MIC" == "true" ]]; then
          echo "üéôÔ∏è Adding MICROPHONE permission"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n"
        fi

        if [[ "$IS_LOCATION" == "true" ]]; then
          echo "üìç Adding LOCATION permissions"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n"
        fi

        if [[ "$IS_CONTACT" == "true" ]]; then
          echo "üìá Adding CONTACT permission"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.READ_CONTACTS\" />\n"
        fi

        if [[ "$IS_CALENDAR" == "true" ]]; then
          echo "üóìÔ∏è Adding CALENDAR permissions"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.READ_CALENDAR\" />\n"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.WRITE_CALENDAR\" />\n"
        fi

        if [[ "$IS_NOTIFICATION" == "true" ]]; then
          echo "üîî Adding NOTIFICATION permission"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" />\n"
        fi

        if [[ "$IS_BIOMETRIC" == "true" ]]; then
          echo "üß¨ Adding BIOMETRIC permissions"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.USE_BIOMETRIC\" />\n"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.USE_FINGERPRINT\" />\n"
        fi

        if [[ "$IS_STORAGE" == "true" ]]; then
          echo "üíæ Adding STORAGE permissions"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />\n"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" />\n"
          PERMISSIONS+="<uses-permission android:name=\"android.permission.READ_MEDIA_AUDIO\" />\n"
        fi

        echo "‚úçÔ∏è Injecting permissions into AndroidManifest.xml..."
        sed "s|<!-- PERMISSION_PLACEHOLDER -->|$PERMISSIONS|" "$TEMPLATE" > "$TARGET"

        echo "‚úÖ AndroidManifest.xml generated with dynamic permissions"
    

    - &permission_ios
      name: Inject iOS permission strings into Info.plist
      script: ./scripts/inject_ios_permissions.sh

    - &debug_env
      name: Debug Environment Variables
      script: |
        echo "*********** App Name & Version ***********"
        echo "APP_NAME: $APP_NAME"
        echo "ORG_NAME: $ORG_NAME"
        echo "WEB_URL: $WEB_URL"
        echo "VERSION_NAME: $VERSION_NAME"      
        echo "VERSION_CODE: $VERSION_CODE" 
        echo "PKG_NAME: $PKG_NAME"
        echo "BUNDLE_ID: $BUNDLE_ID"

        echo "*********** App Customization Configuration ***********"
        echo "Splash screen: $IS_SPLASH"
        echo "Pull to refresh: $IS_PULLDOWN"
        echo "Loading indicators: $IS_LOAD_IND"
        echo "Bottom navigation bar: $IS_BOTTOMMENU"
        echo "Deep linking: $IS_DEEPLINK"

        echo "*********** Push Notification Configuration ***********"
        echo "PUSH_NOTIFY: $PUSH_NOTIFY"
        echo "IS_CHATBOT: $IS_CHATBOT"

        echo "*********** Android Keystore ***********"
        echo "KEY_STORE: $KEY_STORE"
        echo "CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD"
        echo "CM_KEY_ALIAS: $CM_KEY_ALIAS"
        echo "CM_KEY_PASSWORD: $CM_KEY_PASSWORD"

        echo "*********** IOS Keystore ***********"
        echo "APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID"
        echo "APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER"
        echo "APNS_KEY_ID: $APNS_KEY_ID"
        echo "TEAM_ID: $APPLE_TEAM_ID"
        echo "APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL"

        echo "*********** Firebase Android config file ***********"
        echo "firebase_config_android: $firebase_config_android"

        echo "*********** Firebase IOS config file ***********"
        echo "firebase_config_ios: $firebase_config_ios"

        echo "*********** Splash Configuration ***********"
        echo "SPLASH: $SPLASH"
        echo "SPLASH_BG:$SPLASH_BG"
        echo "SPLASH_BG_COLOR: $SPLASH_BG_COLOR"
        echo "SPLASH_TAGLINE: $SPLASH_TAGLINE"
        echo "SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR"
        echo "SPLASH_ANIMATION: $SPLASH_ANIMATION"
        echo "SPLASH_DURATION: $SPLASH_DURATION"
                
        echo "*********** Bottom Navigation Configuration ***********"
        echo "BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS"
        echo "BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR"  
        echo "BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR"
        echo "BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR"
        echo "BOTTOMMENU_FONT: $BOTTOMMENU_FONT"
        echo "BOTTOMMENU_FONT_SIZE: $BOTTOMMENU_FONT_SIZE"
        echo "BOTTOMMENU_FONT_BOLD: $BOTTOMMENU_FONT_BOLD"
        echo "BOTTOMMENU_FONT_ITALIC: $BOTTOMMENU_FONT_ITALIC"
        echo "BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR"
        echo "BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION"
        echo "BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON"

        echo "*********** Permissions ***********"
        echo "IS_CAMERA: $IS_CAMERA"
        echo "IS_LOCATION: $IS_LOCATION"
        echo "IS_MIC: $IS_MIC"
        echo "IS_NOTIFICATION: $IS_NOTIFICATION"
        echo "IS_CONTACT: $IS_CONTACT"
        echo "IS_BIOMETRIC: $IS_BIOMETRIC"
        echo "IS_CALENDAR: $IS_CALENDAR"

        echo "*********** Publish Configuration ***********" 
        echo "EMAIL_ID: $EMAIL_ID"
    - &Get_Font
      name: Download and Install Google Font
      script: |
        FONT_NAME="$BOTTOMMENU_FONT"
        FONT_DIR="$FLUTTER_ROOT/assets/fonts"
        PUBSPEC_PATH="pubspec.yaml"

        # Convert font name for Google Fonts API (Primary) and GitHub (Fallback)
        FONT_NAME_API=$(echo "$FONT_NAME" | sed 's/ /+/g')
        FONT_URL="https://fonts.google.com/download?family=$FONT_NAME_API"

        mkdir -p "$FONT_DIR"

        # Try downloading from Google Fonts API
        wget -q "$FONT_URL" -O /tmp/font.zip

        # Check if the downloaded file is a valid zip archive
        if ! unzip -t /tmp/font.zip &> /dev/null; then
        FONT_FOLDER=$(echo "$FONT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/ //g')
        FONT_URL_GITHUB="https://github.com/google/fonts/trunk/ofl/$FONT_FOLDER"
        echo "‚ö†Ô∏è Google Fonts API failed or invalid file. Trying GitHub: $FONT_URL_GITHUB"

        svn export "$FONT_URL_GITHUB" "$FONT_DIR" --force --quiet

        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to download $FONT_NAME from both sources."
        exit 1
        fi
        else
        unzip -o /tmp/font.zip -d "$FONT_DIR"
        fi

        echo "‚úÖ Font $FONT_NAME downloaded and extracted."

        # Backup existing pubspec.yaml
        cp "$PUBSPEC_PATH" "$PUBSPEC_PATH.bak"

        # Check if the fonts block exists
        if ! grep -q "fonts:" "$PUBSPEC_PATH"; then
        # Add fonts block if not present
        echo "flutter:" >> "$PUBSPEC_PATH"
        echo "  fonts:" >> "$PUBSPEC_PATH"
        fi

        # Add new font family under existing fonts block
        if ! grep -q "- family: '$FONT_NAME'" "$PUBSPEC_PATH"; then
        echo "  - family: '$FONT_NAME'" >> "$PUBSPEC_PATH"
        for font in $(find $FONT_DIR -name "*.ttf" -o -name "*.otf"); do
        echo "      - asset: $font" >> "$PUBSPEC_PATH"
        done
        fi

        flutter pub get
        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to get Flutter dependencies"
        exit 1
        fi

        echo "‚úÖ Font installation and pubspec.yaml update completed."

    - &get_splash
      name: Get splash screen image from splash image from Url
      script: |
        if [ "$IS_SPLASH" = "true" ]; then
           if [ -f assets/images/splash.png ]; then
            rm assets/images/splash.png
            echo "‚úÖ Deleted: assets/images/splash.png"
            else
            echo "‚ö†Ô∏è splash.png not found"
            fi
        
          echo "üöÄ Started: Downloading splash assets"

          mkdir -p assets/images/

          # Download splash logo
          echo "‚¨áÔ∏è Downloading splash logo from: $SPLASH"
          wget -O assets/images/splash.png "$SPLASH"
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Certificate issue or download failed. Retrying with --no-check-certificate..."
            wget --no-check-certificate -O assets/images/splash.png "$SPLASH"
          fi

          if [ ! -f assets/images/splash.png ]; then
            echo "‚ùå Error: Failed to download SPLASH logo"
            exit 1
          fi

          # Download splash background (optional)
          if [ -n "$SPLASH_BG" ]; then
            echo "‚¨áÔ∏è Downloading splash background from: $SPLASH_BG"
            wget -O assets/images/splash_bg.png "$SPLASH_BG"
            if [ $? -ne 0 ]; then
              echo "‚ö†Ô∏è Certificate issue or download failed. Retrying with --no-check-certificate..."
              wget --no-check-certificate -O assets/images/splash_bg.png "$SPLASH_BG"
            fi

            if [ ! -f assets/images/splash_bg.png ]; then
              echo "‚ùå Error: Failed to download SPLASH background"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è No SPLASH_BG provided, skipping background download"
          fi

          flutter pub get
          echo "‚úÖ Completed: Splash assets downloaded"
        else
          echo "‚è≠Ô∏è Skipping splash asset download (IS_SPLASH != true)"
        fi

    - &change_proj_name
      name: Change Project Name
      script: |
        echo "App Name: $APP_NAME"
        # 2Ô∏è‚É£ Sanitize: lowercase, remove special characters, replace spaces with underscores
          SANITIZED_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9 ' | tr ' ' '_')

        # 3Ô∏è‚É£ Extract old name from pubspec.yaml
        OLD_NAME_LINE=$(grep '^name: ' pubspec.yaml)
        OLD_NAME=$(echo "$OLD_NAME_LINE" | cut -d ' ' -f2)

        echo "üîÅ Renaming project from '$OLD_NAME' to '$SANITIZED_NAME'..."

        # Update pubspec.yaml
        sed -i '' "s/^name: .*/name: $SANITIZED_NAME/" pubspec.yaml

        # Update Dart imports
          echo "üîÑ Updating Dart package imports..."
          grep -rl "package:$OLD_NAME" lib/ | xargs sed -i '' "s/package:$OLD_NAME/package:$SANITIZED_NAME/g"
          
         
          
          # iOS: Update CFBundleName in Info.plist
          echo "üõ†Ô∏è Updating iOS CFBundleName..."
          plutil -replace CFBundleName -string "$APP_NAME" ios/Runner/Info.plist
          
          # Optional: Rename folder (if not on CI/CD)
          # cd ..
          # mv "$OLD_NAME" "$SANITIZED_NAME"
          # cd "$SANITIZED_NAME"
          
          # Clean and get packages
          flutter clean
          flutter pub get
          
          echo "‚úÖ Project renamed to '$SANITIZED_NAME'"
          
          echo "üöÄ iOS CFBundleName set to '$APP_NAME'"

    - &get_logo
      name: Get logo image from logoUrl
      script: |
        echo "üßπ Deleting old splash and logo assets..."
  
        if [ -f assets/images/logo.png ]; then
        rm assets/images/logo.png
        echo "‚úÖ Deleted: assets/images/logo.png"
        else
        echo "‚ö†Ô∏è logo.png not found"
        fi
        echo "üöÄ Started: Downloading logo from $LOGO_URL"

        mkdir -p assets/images/
        
        # Try downloading with SSL certificate check first (silent test)
        wget --spider --quiet "$LOGO_URL"
        if [ $? -ne 0 ]; then
          echo "‚ö†Ô∏è SSL verification failed. Retrying with --no-check-certificate..."
          WGET_OPTS="--no-check-certificate"
        else
          WGET_OPTS=""
        fi

        # Attempt actual download
        wget $WGET_OPTS -O assets/images/logo.png "$LOGO_URL"

        # Check if the file was successfully downloaded
        if [ ! -f assets/images/logo.png ]; then
          echo "‚ùå Error: Failed to download logo from $LOGO_URL"
          exit 1
        fi

        flutter pub get
        echo "‚úÖ Completed: Logo downloaded"

    - &set_launcher_icons
      name: Generate Launcher Icons
      script: |
        echo "üöÄ Generating launcher icons"

        flutter pub get

        # Generates launcher icons using flutter_launcher_icons configuration in pubspec.yaml
        flutter pub run flutter_launcher_icons

        echo "‚úÖ Launcher icons generated successfully"

    - &change_app_name
      name: Change app name
      script: |
        echo "üöÄ Changing app name to: $APP_NAME"

          flutter pub run rename setAppName --value "$APP_NAME"
          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"
            # Default values
          VERSION_NAME="${VERSION_NAME:-1.0.0}"
          VERSION_CODE="${VERSION_CODE:-100}"

          # Check if VERSION_NAME is empty or not set
          if [ -z "$VERSION_NAME" ]; then
            VERSION_NAME=$DEFAULT_VERSION_NAME
            echo "üî¢ Setting DEFAULT_VERSION_NAME"
          fi

          # Check if VERSION_CODE is empty or not set
          if [ -z "$VERSION_CODE" ]; then
            VERSION_CODE=$DEFAULT_VERSION_CODE
            echo "üî¢ Setting DEFAULT_VERSION_CODE"
          fi

          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"

          echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
          # Replace or add version line in pubspec.yaml
          if grep -q "^version: " pubspec.yaml; then
            sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
          echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi

          flutter pub get

          echo "‚úÖ App name changed and version set successfully"
    - &Inject_Firebase_iOS_Push
      name: Firebase Push Notification Setup for iOS
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üîî Enabling Firebase Push Notifications for iOS..."

          # 1. Download and apply Firebase config
          mkdir -p firebase/ios
          if [ -n "$firebase_config_ios" ]; then
            echo "üì• Downloading GoogleService-Info.plist..."
            wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 --no-check-certificate \
              -O assets/GoogleService-Info.plist "$firebase_config_ios"
          else
            echo "‚ö†Ô∏è firebase_config_ios is not set. Skipping Firebase config download."
          fi

          if [ -f "assets/GoogleService-Info.plist" ]; then
            cp assets/GoogleService-Info.plist ios/Runner/GoogleService-Info.plist
            echo "‚úÖ GoogleService-Info.plist copied to ios/Runner/"
          else
            echo "‚ùå Missing GoogleService-Info.plist. Cannot proceed with Firebase setup."
            exit 1
          fi

          # 2. Copy Package.resolved if committed
          if [ -f "firebase/ios/Package.resolved" ]; then
            mkdir -p ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/
            cp firebase/ios/Package.resolved ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
            echo "üì¶ Firebase SDK Package.resolved copied."
          else
            echo "‚ö†Ô∏è Package.resolved not found. You must add Firebase SDK manually via Xcode."
          fi

          # 3. Download APNs Auth Key if provided
          if [ -n "$APNS_AUTH_KEY_URL" ]; then
            echo "üì• Downloading APNs AuthKey..."
            wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 --no-check-certificate \
              -O firebase/ios/AuthKey.p8 "$APNS_AUTH_KEY_URL"
            echo "‚úÖ AuthKey.p8 downloaded."
          else
            echo "‚ÑπÔ∏è APNS_AUTH_KEY_URL not set. Skipping APNs key download."
          fi

          # 4. Check for APNs entitlement key
          if [[ -f ios/Runner/Runner.entitlements ]] && grep -q "aps-environment" ios/Runner/Runner.entitlements; then
            echo "‚úÖ APNs entitlement found in Runner.entitlements."
          else
            echo "‚ö†Ô∏è Warning: Missing or incomplete APNs entitlement in ios/Runner/Runner.entitlements."
          fi

        else
          echo "üö´ PUSH_NOTIFY is false. Skipping Firebase push notification setup for iOS."

          # Cleanup if previously added
          rm -f ios/Runner/GoogleService-Info.plist
          rm -f ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
          echo "üßπ Cleaned up Firebase iOS config files."
        fi

    #    - &Inject_Firebase_iOS_Push
#      name: Firebase Push Notification Setup for iOS
#      script: |
#        if [ "$PUSH_NOTIFY" = "true" ]; then
#          echo "üîî Enabling Firebase Push Notifications for iOS..."
#
#          # 1. Download and apply Firebase config
#          mkdir -p firebase/ios
#          if [ -n "$firebase_config_ios" ]; then
#            wget -O firebase/ios/GoogleService-Info.plist "$firebase_config_ios"
#          fi
#
#          if [ -f "firebase/ios/GoogleService-Info.plist" ]; then
#            cp firebase/ios/GoogleService-Info.plist ios/Runner/GoogleService-Info.plist
#            echo "‚úÖ GoogleService-Info.plist copied."
#          else
#            echo "‚ùå Missing GoogleService-Info.plist. Cannot proceed with Firebase setup."
#            exit 1
#          fi
#
#          # 2. Add Firebase SDK (via committed Package.resolved)
#          if [ -f "firebase/ios/Package.resolved" ]; then
#            mkdir -p ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/
#            cp firebase/ios/Package.resolved ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
#            echo "üì¶ Firebase SDK resolved from committed Package.resolved."
#          else
#            echo "‚ö†Ô∏è Package.resolved not found. Firebase SDK must be added manually in Xcode."
#          fi
#
#          # 3. Download APNs Auth Key if provided (Optional)
#          if [ -n "$APNS_AUTH_KEY_URL" ]; then
#            wget -O firebase/ios/AuthKey.p8 "$APNS_AUTH_KEY_URL"
#            echo "üì• Downloaded AuthKey.p8 for APNs"
#          fi
#
#          # 4. Check APNs entitlements
#          if grep -q "aps-environment" ios/Runner/Runner.entitlements; then
#            echo "‚úÖ APNs entitlements already enabled."
#          else
#            echo "‚ö†Ô∏è Warning: Missing APNs entitlement in Runner.entitlements."
#          fi
#        else
#          echo "üö´ PUSH_NOTIFY is false. Skipping Firebase push notification setup for iOS."
#          rm -f ios/Runner/GoogleService-Info.plist
#          rm -f ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
#          echo "üßπ Cleaned up Firebase iOS config."
#        fi
    - &Inject_Firebase_new
      name: Inject Firebase and buildscript block
      script: |
        echo "üîß Checking Firebase configuration for Android..."

        # Function to download with retry and SSL check
        download_with_retry() {
            local url=$1
            local output=$2
            local max_retries=3
            local retry_delay=5
            local attempt=1
            local WGET_OPTS=""
            
            while [ $attempt -le $max_retries ]; do
                echo "‚û°Ô∏è Attempt $attempt to download $url"
                wget --spider --quiet "$url"
                if [ $? -ne 0 ]; then
                    echo "‚ö†Ô∏è SSL verification failed. Using --no-check-certificate"
                    WGET_OPTS="--no-check-certificate"
                else
                    WGET_OPTS=""
                fi
                
                wget $WGET_OPTS -O "$output" "$url"
                if [ $? -eq 0 ]; then
                    echo "‚úÖ Successfully downloaded $output"
                    return 0
                else
                    echo "‚ùå Download failed on attempt $attempt"
                fi
                
                attempt=$((attempt + 1))
                if [ $attempt -le $max_retries ]; then
                    echo "‚è≥ Waiting $retry_delay seconds before retry..."
                    sleep $retry_delay
                fi
            done
            
            echo "üö® Failed to download $url after $max_retries attempts."
            return 1
        }

        # Check and update the project-level build.gradle
        PROJECT_BUILD_FILE="android/build.gradle"
        APP_BUILD_FILE="android/app/build.gradle"
        GOOGLE_SERVICES_CLASSPATH="classpath 'com.google.gms:google-services:4.3.15'"
        GOOGLE_SERVICES_PLUGIN="apply plugin: 'com.google.gms.google-services'"

        # Conditional Firebase integration based on PUSH_NOTIFY flag
        if [ "$PUSH_NOTIFY" = "true" ]; then
            echo "üì¶ Enabling Firebase integration..."

            # Check if Firebase classpath is already present in the project-level build.gradle
            if ! grep -q 'com.google.gms:google-services' $PROJECT_BUILD_FILE; then
                echo "‚úÖ Firebase classpath not found, injecting..."
                
                if ! grep -q 'buildscript {' $PROJECT_BUILD_FILE; then
                    # No buildscript block found ‚Äì inject the entire block at the top
                    echo 'buildscript {
                      repositories {
                          google()
                          mavenCentral()
                      }
                      dependencies {
                          classpath "com.google.gms:google-services:4.3.15"
                      }
                  }' > temp.gradle
                    cat $PROJECT_BUILD_FILE >> temp.gradle
                    mv temp.gradle $PROJECT_BUILD_FILE
                    echo "‚úÖ Full buildscript block injected"
                else
                    # buildscript exists ‚Äì insert the classpath into the dependencies
                    sed -i '' '/dependencies {/a\\
                classpath "com.google.gms:google-services:4.3.15"' $PROJECT_BUILD_FILE
                    echo "‚úÖ Firebase classpath inserted into existing buildscript"
                fi
            else
                echo "‚úÖ Firebase classpath already present, skipping injection"
            fi

            # Check if Google services plugin is applied at the bottom of app-level build.gradle
            if ! grep -q "$GOOGLE_SERVICES_PLUGIN" $APP_BUILD_FILE; then
                echo "‚úÖ Google services plugin not found, injecting..."
                echo -e "\n$GOOGLE_SERVICES_PLUGIN" >> $APP_BUILD_FILE
                echo "‚úÖ Plugin applied at the bottom of $APP_BUILD_FILE"
            else
                echo "‚úÖ Google services plugin already applied, skipping"
            fi
                        
            echo "üì• Downloading google-services.json..."
            mkdir -p android/app

            # Download Firebase configuration file
            download_with_retry "$firebase_config_android" "android/app/google-services.json"
                        
            echo "üîß Updating values.xml file"
            mkdir -p android/app/src/main/res/values/
            cat > android/app/src/main/res/values/values.xml << 'EOF'
            <?xml version="1.0" encoding="utf-8"?>
            <resources>
                <string name="default_web_client_id">${FIREBASE_WEB_CLIENT_ID}</string>
                <string name="firebase_database_url">${FIREBASE_DATABASE_URL}</string>
                <string name="gcm_defaultSenderId">${FIREBASE_SENDER_ID}</string>
                <string name="google_api_key">${FIREBASE_API_KEY}</string>
                <string name="google_app_id">${FIREBASE_APP_ID}</string>
                <string name="google_crash_reporting_api_key">${FIREBASE_CRASH_REPORTING_KEY}</string>
                <string name="project_id">${FIREBASE_PROJECT_ID}</string>
            </resources>
            EOF
            echo "‚úÖ values.xml file created successfully."
        else
            echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

    - &Inject_Firebase_Services
      name: Inject Google Services Plugin
      script: |
          if [ -f android/app/google-services.json ]; then
          echo "‚úÖ File found"
          else
          echo "‚ùå Missing google-services.json"
          exit 1
          fi
          set -e
          
          if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "‚úÖ Google Services Plugin: Start injecting..."
        
          FIREBASE_CLASSPATH='classpath("com.google.gms:google-services:4.3.15")'
          DESUGAR_DEP='implementation("com.android.tools:desugar_jdk_libs:2.0.4")'
        
          PROJECT_BUILD_FILE="android/build.gradle.kts"
          APP_BUILD_FILE="android/app/build.gradle.kts"
        
          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Add classpath to android/build.gradle.kts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          if ! grep -q "com.google.gms:google-services" "$PROJECT_BUILD_FILE"; then
          echo "üîß Injecting Firebase classpath into $PROJECT_BUILD_FILE..."
          awk '
          /buildscript\s*{/ { print; in_block=1; next }
          in_block && /dependencies\s*{/ {
          print; print "        classpath(\"com.google.gms:google-services:4.3.15\")"; in_block=0; next
          }
          { print }
          ' "$PROJECT_BUILD_FILE" > tmp && mv tmp "$PROJECT_BUILD_FILE"
          echo "‚úÖ Classpath injected."
          else
          echo "‚úÖ Firebase classpath already exists."
          fi
        
          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Apply plugin in android/app/build.gradle.kts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          if grep -q "plugins\s*{" "$APP_BUILD_FILE"; then
          if ! grep -q 'id("com.google.gms.google-services")' "$APP_BUILD_FILE"; then
          echo "üîß Applying Google Services plugin..."
          sed -i '' '/plugins\s*{/a\
          id("com.google.gms.google-services")
          ' "$APP_BUILD_FILE"
          echo "‚úÖ Plugin applied."
          else
          echo "‚úÖ Google Services plugin already applied."
          fi
          else
          echo "‚ùå plugins block not found in $APP_BUILD_FILE"
          exit 1
          fi
        
          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Add desugar dependency ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          if ! grep -q 'desugar_jdk_libs' "$APP_BUILD_FILE"; then
          echo "üîß Adding desugar_jdk_libs dependency..."
          sed -i '' '/dependencies\s*{/a\
          coreLibraryDesugaring('"$DESUGAR_DEP"')
          ' "$APP_BUILD_FILE"
          else
          echo "‚úÖ Desugar dependency already added."
          fi
        
          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Enable desugaring in compileOptions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          if ! grep -q 'isCoreLibraryDesugaringEnabled = true' "$APP_BUILD_FILE"; then
          echo "üîß Enabling desugaring in compileOptions..."
          sed -i '' '/compileOptions\s*{/a\
          isCoreLibraryDesugaringEnabled = true
          ' "$APP_BUILD_FILE"
          else
          echo "‚úÖ Desugaring already enabled in compileOptions."
          fi
          
          else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
          fi



#        set -e
#
#          if [ "$PUSH_NOTIFY" = "true" ]; then
#          echo "‚úÖ Google Services Plugin: Start injecting..."
#
#          FIREBASE_CLASSPATH='classpath "com.google.gms:google-services:4.3.15"'
#          CLD_CLASSPATH = 'coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4' // Or latest'
#          if ! grep -q 'com.google.gms:google-services' android/build.gradle; then
#          echo "‚úÖ Firebase classpath not found, injecting..."
#
#          if ! grep -q 'buildscript {' android/build.gradle; then
#          echo "üîß No buildscript block found, injecting entire block..."
#
#          printf 'buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    %s\n  }\n}\n\n' "$FIREBASE_CLASSPATH" | cat - android/build.gradle > temp && mv temp android/build.gradle
#
#          echo "‚úÖ Full buildscript block injected"
#          else
#          echo "üîß buildscript block found, inserting classpath..."
#
#          # In-place edit to insert classpath line inside dependencies block
#          sed -i '' "/buildscript {/,/dependencies {/ s/dependencies {/dependencies {\n    $FIREBASE_CLASSPATH \n$CLD_CLASSPATH/" android/build.gradle
#
#          echo "‚úÖ Firebase classpath inserted"
#          fi
#          else
#          echo "‚úÖ Firebase classpath already present, skipping injection"
#          fi
#
#          echo "üîß Checking for Google Services plugin in android/app/build.gradle..."
#
#          if ! grep -q "com.google.gms.google-services" android/app/build.gradle; then
#          echo "üîß Adding Google Services plugin to android/app/build.gradle"
#          echo -e "\napply plugin: 'com.google.gms.google-services'" >> android/app/build.gradle
#          echo "‚úÖ Google Services plugin added"
#          else
#          echo "‚úÖ Google Services plugin already present"
#          fi
#          else
#          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
#          fi



    - &get_json
      name: Get JSON file & Prepare Firebase configuration
      script: |

          if [ "$PUSH_NOTIFY" = "true" ]; then
            echo "üì• Downloading google-services.json..."
      
            # Ensure target directories exist
            mkdir -p android/app
            mkdir -p assets
      
            # Function to download with retry and SSL check
            download_with_retry() {
            local url=$firebase_config_android
            local output=android/app/google-services.json
            local max_retries=3
            local retry_delay=5
            local attempt=1
            local WGET_OPTS=""
            
            echo "url=$firebase_config_android"
            echo "output=android/app/google-services.json"
            echo "max_retries=3"
            echo "attempt=1"
            
            while [ $attempt -le $max_retries ]; do
            echo "‚û°Ô∏è Attempt $attempt to download $url"
            wget --spider --quiet "$url"
            if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è SSL verification failed. Using --no-check-certificate"
            WGET_OPTS="--no-check-certificate"
            else
            WGET_OPTS=""
            fi
            
            wget $WGET_OPTS -O "$output" "$url"
            if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully downloaded $output"
            return 0
            else
            echo "‚ùå Download failed on attempt $attempt"
            fi
            
            attempt=$((attempt + 1))
            if [ $attempt -le $max_retries ]; then
            echo "‚è≥ Waiting $retry_delay seconds before retry..."
            sleep $retry_delay
            fi
            done
            
            echo "üö® Failed to download $url after $max_retries attempts."
            return 1
          }
      
            # Download files with retry
            download_with_retry "$firebase_config_android" "android/app/google-services.json"
      
            # Verify file and copy to assets/
            if [ -f android/app/google-services.json ]; then
            echo "‚úÖ google-services.json found"
            cp android/app/google-services.json assets/google-services.json
            echo "üìÇ Copied google-services.json to assets/"
            else
            echo "‚ùå Missing google-services.json"
            exit 1
            fi
          else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
          fi
        


#        if [ "$PUSH_NOTIFY" = "true" ]; then
    #        echo "üì• Downloading google-services.json..."
    #
    #        # Ensure target directories exist
    #        mkdir -p android/app
    #        mkdir -p assets
    #
    #        # Try downloading with SSL verification first
    #        wget --spider --quiet "$firebase_config_android"
    #        if [ $? -ne 0 ]; then
    #        echo "‚ö†Ô∏è SSL verification failed. Retrying with --no-check-certificate..."
    #        WGET_OPTS="--no-check-certificate"
    #        else
    #        WGET_OPTS=""
    #        fi
    #
    #        # Download the file(s) using determined option
    #        wget $WGET_OPTS -O android/app/google-services.json "$firebase_config_android"
    #        wget $WGET_OPTS -O assets/google-services.json "$firebase_config_android"
    #        else
    #        echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
    #        fi

    - &Inject_Firebase_old
      name: Inject Firebase and buildscript block
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üì¶ Enabling Firebase integration..."

          # Check if Firebase classpath is already present
          if ! grep -q 'com.google.gms:google-services' android/build.gradle; then
            echo "‚úÖ Firebase classpath not found, injecting..."

            if ! grep -q 'buildscript {' android/build.gradle; then
              # No buildscript block found ‚Äì inject the entire block at the top
              sed -i '1s;^;buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    classpath "com.google.gms:google-services:4.3.15"\n  }\n}\n\n;' android/build.gradle
              echo "‚úÖ Full buildscript block injected"
            else
              # buildscript exists ‚Äì insert the classpath into the dependencies
              sed -i '/buildscript {/,/}/ s/dependencies {/dependencies {\n    classpath "com.google.gms:google-services:4.3.15"/' android/build.gradle
              echo "‚úÖ Firebase classpath inserted into existing buildscript"
            fi
          else
            echo "‚úÖ Firebase classpath already present, skipping injection"
          fi
        else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

    - &Update_SDK_Version
      name: Updating SDK Version for Android & iOS (Conditional)
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üîß Updating Android and iOS SDK versions..."

          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android SDK Versions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          echo "üì± Updating Android minSdkVersion and targetSdkVersion in build.gradle.kts"
          ANDROID_BUILD_FILE="android/app/build.gradle.kts"

          if [ -f "$ANDROID_BUILD_FILE" ]; then
            sed -i.bak -E "s/minSdkVersion\s*=\s*\d+/minSdkVersion = 21/" "$ANDROID_BUILD_FILE"
            sed -i.bak -E "s/targetSdkVersion\s*=\s*\d+/targetSdkVersion = 34/" "$ANDROID_BUILD_FILE"
            echo "‚úÖ Android SDK versions updated in Kotlin DSL"
          else
            echo "‚ö†Ô∏è android/app/build.gradle.kts not found!"
          fi

          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS Minimum Target Version ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          echo "üçè Updating iOS minimum deployment target in Podfile..."
          PODFILE_PATH="ios/Podfile"
          if [ -f "$PODFILE_PATH" ]; then
            sed -i.bak -E "s/platform :ios, '[0-9.]+'/platform :ios, '13.0'/" "$PODFILE_PATH"
            echo "‚úÖ iOS minimum deployment target updated to 13.0"
          else
            echo "‚ö†Ô∏è Podfile not found. Skipping iOS deployment target update."
          fi

          # Optional: Update iOS Deployment Target in project.pbxproj
          IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
          if [ -f "$IOS_PROJECT_FILE" ]; then
            sed -i '' -e "s/IPHONEOS_DEPLOYMENT_TARGET = .*;/IPHONEOS_DEPLOYMENT_TARGET = 13.0;/" "$IOS_PROJECT_FILE"
            echo "‚úÖ Xcode project iOS deployment target updated to 13.0"
          fi

        else
          echo "üö´ SDK version update skipped (PUSH_NOTIFY is not true)"
        fi
    

    - &update_package_names
      name: Update Android & iOS Package Name / Bundle ID
      script: |
        echo "üîß Updating Android and iOS package name (bundle ID)..."

        # Validate package/bundle ID format (Java-style, dot-separated)
        if [[ ! "$PKG_NAME" =~ ^[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)+$ ]]; then
          echo "‚ùå ERROR: Invalid package/bundle identifier: $PKG_NAME"
          exit 1
        fi

        echo "‚úî Package name / Bundle ID: $PKG_NAME"

        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ANDROID UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        echo "üì¶ Updating Android package..."

        # Update using rename package
        flutter pub run rename setBundleId --value "$PKG_NAME"

        # Update package name in AndroidManifest.xml
        sed -i.bak "s/package=\"[^\"]*\"/package=\"$PKG_NAME\"/g" android/app/src/main/AndroidManifest.xml

        # Update applicationId in Kotlin DSL
        BUILD_FILE="android/app/build.gradle.kts"
        if [ -f "$BUILD_FILE" ]; then
          sed -i.bak -E "s/applicationId\s*=\s*\"[^\"]+\"/applicationId = \"$PKG_NAME\"/" "$BUILD_FILE"
          echo "‚úÖ Updated applicationId in Kotlin DSL"
        else
          echo "‚ö†Ô∏è build.gradle.kts not found. Skipping Android applicationId update."
        fi

        echo "‚úÖ Android package updated."

        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        echo "üçè Updating iOS bundle identifier..."

        IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
        if [ -f "$IOS_PROJECT_FILE" ]; then
          sed -i.bak "s/PRODUCT_BUNDLE_IDENTIFIER = .*;/PRODUCT_BUNDLE_IDENTIFIER = $PKG_NAME;/g" "$IOS_PROJECT_FILE"
          echo "‚úÖ iOS bundle identifier updated."
        else
          echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
          exit 1
        fi
    

    - &build_ipa
      name: Building iOS App with Feature Flags
      script: |
        if [ ! -f signing_cert.p12 ] || [ ! -f profile.mobileprovision ]; then
        echo "‚ùå Error: Certificates or provisioning profile missing."
        exit 1
        fi

        echo "üîë Setting up provisioning profile for build..."
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

        echo "‚úÖ Building iOS IPA..."
        flutter build ipa \
        --release \
        --dart-define=WEB_URL="$WEB_URL" \
        --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
        --dart-define=PKG_NAME="$PKG_NAME" \
        --dart-define=APP_NAME="$APP_NAME" \
        --dart-define=ORG_NAME="$ORG_NAME" \
        --dart-define=VERSION_NAME="$VERSION_NAME" \
        --dart-define=VERSION_CODE="$VERSION_CODE" \
        --dart-define=EMAIL_ID="$EMAIL_ID" \
        --dart-define=IS_SPLASH="$IS_SPLASH" \
        --dart-define=SPLASH="$SPLASH" \
        --dart-define=SPLASH_BG="$SPLASH_BG" \
        --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
        --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
        --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
        --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
        --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
        --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
        --dart-define=LOGO_URL="$LOGO_URL" \
        --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
        --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
        --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
        --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
        --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
        --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
        --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
        --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
        --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
        --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
        --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
        --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
        --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
        --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
        --dart-define=IS_CAMERA="$IS_CAMERA" \
        --dart-define=IS_LOCATION="$IS_LOCATION" \
        --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
        --dart-define=IS_MIC="$IS_MIC" \
        --dart-define=IS_CONTACT="$IS_CONTACT" \
        --dart-define=IS_CALENDAR="$IS_CALENDAR" \
        --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
        --dart-define=IS_STORAGE="$IS_STORAGE" \
        --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
        --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
        --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
        --dart-define=KEY_STORE="$KEY_STORE" \
        --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
        --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
        --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" \
        --export-options-plist=ExportOptions.plist > flutter_build_ios.log

        echo "‚úÖ IPA build completed successfully."

        echo "üßπ Cleaning up certificates and profiles..."
        security delete-keychain build.keychain
        rm -rf ios_certificates
        rm -f ExportOptions.plist
        echo "‚úÖ Cleanup completed."
    - &build_apk
      name: Building Apk with Feature Flags
      script: |
        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"
         # Default values
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-100}"

        # Check if VERSION_NAME is empty or not set
        if [ -z "$VERSION_NAME" ]; then
          VERSION_NAME=$DEFAULT_VERSION_NAME
          echo "üî¢ Setting DEFAULT_VERSION_NAME"
        fi

        # Check if VERSION_CODE is empty or not set
        if [ -z "$VERSION_CODE" ]; then
          VERSION_CODE=$DEFAULT_VERSION_CODE
          echo "üî¢ Setting DEFAULT_VERSION_CODE"
        fi

        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"

        echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
        if grep -q "^version: " pubspec.yaml; then
          sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
        echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi

        flutter pub get
        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to get Flutter dependencies"
        exit 1
        fi

        echo "‚úÖ Building APK..."
        flutter build apk --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
            --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
            --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
            --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build_apk.log
        if [ $? -ne 0 ]; then
        echo "‚ùå APK build failed"
        cat flutter_build.log
        exit 1
        fi
        echo "‚úÖ APK build completed."

    - &build_apk_release
      name: Building Apk with Feature Flags
      script: |
       

        echo "‚úÖ Building APK..."
        flutter build apk --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
            --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
            --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
            --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CHATBOT="$IS_CHATBOT" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build_apk.log
        if [ $? -ne 0 ]; then
        echo "‚ùå APK build failed"
        cat flutter_build_apk.log
        exit 1
        fi
        echo "‚úÖ APK build completed."

        echo "‚úÖ Building AppBundle..."
        flutter build appbundle --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
            --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
            --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
            --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CHATBOT="$IS_CHATBOT" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build_aab.log
        if [ $? -ne 0 ]; then
        echo "‚ùå AppBundle build failed"
        cat flutter_build_aab.log
        exit 1
        fi
        echo "‚úÖ AppBundle build completed."

    - &key_store
      name: Setup Android keystore and insert Gradle signing block (KTS)
      script: |
          echo "üì¶ Setting up Android signing configuration..."
  
          # Validate required environment variables
          : "${KEY_STORE:?Missing KEY_STORE}"
          : "${CM_KEYSTORE_PASSWORD:?Missing CM_KEYSTORE_PASSWORD}"
          : "${CM_KEY_ALIAS:?Missing CM_KEY_ALIAS}"
          : "${CM_KEY_PASSWORD:?Missing CM_KEY_PASSWORD}"
  
          mkdir -p android/app
  
          echo "üì• Downloading keystore..."
          max_attempts=3
          for attempt in $(seq 1 $max_attempts); do
            if curl -fsSL -o android/app/keystore.jks "$KEY_STORE"; then
              echo "‚úÖ Keystore downloaded successfully"
              break
            else
              echo "‚ùå Attempt $attempt failed"
              [ "$attempt" -eq "$max_attempts" ] && exit 1
              sleep 5
            fi
          done
  
          echo "üìù Writing key.properties..."
          cat > android/key.properties <<EOF
          storeFile=keystore.jks
          storePassword=$CM_KEYSTORE_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          keyPassword=$CM_KEY_PASSWORD
          EOF
          
          GRADLE_FILE="android/app/build.gradle.kts"
          echo "üîê Configuring Gradle signing..."
          
          # Inject keystoreProperties block if missing
          if ! grep -q 'val keystoreProperties' "$GRADLE_FILE"; then
          echo "üîß Adding keystoreProperties block..."
          sed -i '1s;^;val keystoreProperties = Properties().apply {\n    load(File(rootProject.rootDir, "android/key.properties").inputStream())\n}\n\n;' "$GRADLE_FILE"
          fi
          
          # Inject signingConfigs block if missing
          if ! grep -q 'signingConfigs' "$GRADLE_FILE"; then
          echo "üîß Injecting signingConfigs block..."
          awk '/android\s*{/{print; print "    signingConfigs {\n        create(\"release\") {\n            storeFile = file(\"keystore.jks\")\n            storePassword = keystoreProperties[\"storePassword\"] as String\n            keyAlias = keystoreProperties[\"keyAlias\"] as String\n            keyPassword = keystoreProperties[\"keyPassword\"] as String\n            enableV1Signing = true\n            enableV2Signing = true\n            enableV3Signing = true\n        }\n    }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          fi
          
          # Inject buildTypes block if missing
          if ! grep -q "buildTypes" "$GRADLE_FILE"; then
          echo "üîß Injecting buildTypes with release config..."
          awk '/android\s*{/{print; print "    buildTypes {\n        getByName(\"release\") {\n            isMinifyEnabled = true\n            isShrinkResources = true\n            signingConfig = signingConfigs.getByName(\"release\")\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\n        }\n    }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          elif ! grep -q "signingConfig = signingConfigs.getByName(\"release\")" "$GRADLE_FILE"; then
          echo "üîß Updating release block to use signingConfig..."
          awk '/buildTypes\s*{/{print; print "        getByName(\"release\") {\n            signingConfig = signingConfigs.getByName(\"release\")\n        }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          fi
          
          echo "‚úÖ Android signing configuration completed"
          
          echo "üîç Verifying signing setup..."
          [ -f "android/app/keystore.jks" ] && [ -f "android/key.properties" ] && echo "‚úÖ All signing files are ready" || {
          echo "‚ùå Verification failed"
          exit 1
          }

    - &key_store2
      name: Setup Android keystore and insert Gradle signing block (KTS)
      script: |
          echo "üì¶ Setting up Android signing configuration..."
          
          # Validate keystore environment variables
          if [ -z "$KEY_STORE" ] || [ -z "$CM_KEYSTORE_PASSWORD" ] || [ -z "$CM_KEY_ALIAS" ] || [ -z "$CM_KEY_PASSWORD" ]; then
            echo "‚ùå Missing required keystore environment variables"
            echo "Required variables:"
            echo "- KEY_STORE: URL to download keystore"
            echo "- CM_KEYSTORE_PASSWORD: Keystore password"
            echo "- CM_KEY_ALIAS: Key alias"
            echo "- CM_KEY_PASSWORD: Key password"
            exit 1
          fi

          # Create android directory if it doesn't exist
          mkdir -p android/app

          echo "üì• Downloading keystore..."
          # Download with retry logic
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f -o android/app/keystore.jks "$KEY_STORE"; then
              echo "‚úÖ Keystore downloaded successfully"
              break
            else
              echo "‚ùå Attempt $attempt failed to download keystore"
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå Failed to download keystore after $max_attempts attempts"
                exit 1
              fi
              attempt=$((attempt + 1))
              sleep 5
            fi
          done

          echo "üìù Writing key.properties..."
          cat > android/key.properties <<EOF
          storeFile=keystore.jks
          storePassword=$CM_KEYSTORE_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          keyPassword=$CM_KEY_PASSWORD
          EOF
        
          echo "üîê Configuring Gradle signing..."
          
          GRADLE_FILE="android/app/build.gradle.kts"
          
          # Add keystoreProperties block at the top if not present
          if ! grep -q 'val keystoreProperties' "$GRADLE_FILE"; then
            echo "üîß Adding keystoreProperties block..."
            sed -i '1s;^;val keystoreProperties = Properties().apply {\n    load(File(rootProject.rootDir, "android/key.properties").inputStream())\n}\n\n;' "$GRADLE_FILE"
          else
            echo "‚úÖ keystoreProperties block already present"
          fi
          
          # Inject signingConfigs inside android { ... }
          if ! grep -q 'signingConfigs' "$GRADLE_FILE"; then
            echo "üîß Injecting signingConfigs block..."
            awk '/android\s*{/{print; print "    signingConfigs {\n        create(\"release\") {\n            storeFile = file(\"keystore.jks\")\n            storePassword = keystoreProperties[\"storePassword\"] as String\n            keyAlias = keystoreProperties[\"keyAlias\"] as String\n            keyPassword = keystoreProperties[\"keyPassword\"] as String\n            enableV1Signing = true\n            enableV2Signing = true\n            enableV3Signing = true\n        }\n    }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          else
            echo "‚úÖ signingConfigs already exists"
          fi
          
          # Inject release buildType with proper configuration
          if grep -q "buildTypes" "$GRADLE_FILE"; then
            if ! grep -q "signingConfig = signingConfigs.getByName(\"release\")" "$GRADLE_FILE"; then
              echo "üîß Updating release buildType configuration..."
              awk '/buildTypes\s*{/{print; print "        getByName(\"release\") {\n            isMinifyEnabled = true\n            isShrinkResources = true\n            signingConfig = signingConfigs.getByName(\"release\")\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\n        }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
            else
              echo "‚úÖ Release signing configuration already present"
            fi
          else
            echo "‚ùå buildTypes block not found in $GRADLE_FILE"
            exit 1
          fi
          
          echo "‚úÖ Android signing configuration completed"
          
          # Verify the configuration
          echo "üîç Verifying signing configuration..."
          if [ -f "android/app/keystore.jks" ] && [ -f "android/key.properties" ]; then
            echo "‚úÖ Signing files present and configured"
          else
            echo "‚ùå Signing configuration verification failed"
            exit 1
          fi
    - &Setup_IOS
      name: Setting Up IOS Build
      script: |
        echo "üîê Setting up iOS code signing..."

        export LC_ALL=en_US.UTF-8
        export LANG=en_US.UTF-8

        KEYCHAIN_PASSWORD="temp_key_pass"
        KEYCHAIN_NAME="ios-signing.keychain"

        # Download and import certificate
        echo "üì• Downloading certificate..."
        curl -o signing_cert.p12 "$CERT_URL"

        echo "üîê Creating temporary keychain..."
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security default-keychain -s "$KEYCHAIN_NAME"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

        # Import the certificate to the keychain
        echo "üîë Importing certificate..."
        security import signing_cert.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign

        # Trust the keychain for signing tools
        echo "‚úÖ Trusting keychain for code signing..."
        security list-keychains -s "$KEYCHAIN_NAME"
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"

        # Extract CODE_SIGN_IDENTITY
        echo "üîç Extracting code signing identity from keychain..."
        CODE_SIGN_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | grep -o '".*"' | head -n 1 | tr -d '"')
        echo "‚úÖ CODE_SIGN_IDENTITY: $CODE_SIGN_IDENTITY"
        if [ -z "$CODE_SIGN_IDENTITY" ]; then
        echo "‚ùå Failed to extract CODE_SIGN_IDENTITY"
        exit 1
        fi

        # Download provisioning profile
        echo "üì• Downloading provisioning profile..."
        curl -o profile.mobileprovision "$PROFILE_URL"

        # Extract UUID of the provisioning profile
        UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
        echo "‚úÖ Provisioning Profile UUID: $UUID"

        PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision "$PROFILE_PATH"

        # Update iOS deployment target
        echo "üîß Updating iOS deployment target to 13.0 in Podfile..."
        sed -i '' 's/platform :ios, .*/platform :ios, "13.0"/' ios/Podfile

        # CocoaPods setup
        echo "üõ†Ô∏è Setting up CocoaPods and Flutter dependencies..."
        flutter clean
        rm -rf ios/Pods ios/Podfile.lock ~/Library/Caches/CocoaPods ~/.cocoapods/repos

        set -x
        gem install cocoapods --pre --silent
        gem install securerandom -v 0.3.2 --silent
        pod install --project-directory=ios
        flutter pub get
        set +x

        # Build Flutter iOS app (no code signing)
        flutter build ios --release --no-codesign

        # Archive app with manual signing
        echo "üì¶ Archiving app with code signing..."
        xcodebuild -workspace ios/Runner.xcworkspace \
        -scheme Runner \
        -configuration Release \
        -sdk iphoneos \
        -destination "generic/platform=iOS" \
        -archivePath build/ios/archive/Runner.xcarchive \
        CODE_SIGN_STYLE=Manual \
        DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
        PROVISIONING_PROFILE_SPECIFIER="$UUID" \
        PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
        CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
        OTHER_CODE_SIGN_FLAGS="--keychain ~/Library/Keychains/$KEYCHAIN_NAME-db" \
        archive

        # Create ExportOptions.plist
        cat <<EOF > ExportOptions.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
        "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
        <key>method</key>
        <string>ad-hoc</string>
        <key>provisioningProfiles</key>
        <dict>
        <key>$BUNDLE_ID</key>
        <string>$UUID</string>
        </dict>
        <key>signingStyle</key>
        <string>manual</string>
        <key>teamID</key>
        <string>$APPLE_TEAM_ID</string>
        </dict>
        </plist>
        EOF

        # Export IPA
        echo "üì¶ Exporting IPA..."
        xcodebuild -exportArchive \
        -archivePath build/ios/archive/Runner.xcarchive \
        -exportPath build/ios/ipa \
        -exportOptionsPlist ExportOptions.plist

        echo "‚úÖ IPA export complete: build/ios/ipa"

        # Cleanup
        echo "üßπ Cleaning up..."
        security delete-keychain "$KEYCHAIN_NAME"
        rm -f signing_cert.p12 profile.mobileprovision ExportOptions.plist

        echo "üéâ Done!"

    - &setup_ios_signing_manual
      name: Setting Up iOS Signing (Manual)
      script: |
        echo "üîê Setting up iOS code signing..."
        export LC_ALL=en_US.UTF-8
        export LANG=en_US.UTF-8

        KEYCHAIN_PASSWORD="temp_key_pass"
        KEYCHAIN_NAME="ios-signing.keychain"

        # Download and import certificate
        echo "üì• Downloading certificate..."
        curl -o signing_cert.p12 "$CERT_URL"

        echo "üîê Creating temporary keychain..."
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security default-keychain -s "$KEYCHAIN_NAME"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

        # Import the certificate to the keychain
        echo "üîë Importing certificate..."
        security import signing_cert.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign

        echo "üîç Verifying imported certificate..."
        security find-identity -v -p codesigning "$KEYCHAIN_NAME"

        # Download provisioning profile
        echo "üì• Downloading provisioning profile..."
        curl -o profile.mobileprovision "$PROFILE_URL"

        # Get the UUID of the provisioning profile
        UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
        echo "‚úÖ Profile UUID: $UUID"

        PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision "$PROFILE_PATH"

        # Set the keychain to be trusted for code signing
        echo "‚úÖ Trusting keychain for code signing..."
        security list-keychains -s "$KEYCHAIN_NAME"
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security find-identity -v -p codesigning

        echo "üîß Updating iOS deployment target to 13.0 in Podfile..."
        sed -i '' 's/platform :ios, .*/platform :ios, "13.0"/' ios/Podfile
        cat ios/Podfile | grep platform

          # Flutter build
          echo "‚öôÔ∏è Building Flutter iOS project..."
          flutter build ios --release --no-codesign \
          --dart-define=WEB_URL="$WEB_URL" \
          --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
          --dart-define=PKG_NAME="$PKG_NAME" \
          --dart-define=APP_NAME="$APP_NAME" \
          --dart-define=ORG_NAME="$ORG_NAME" \
          --dart-define=VERSION_NAME="$VERSION_NAME" \
          --dart-define=VERSION_CODE="$VERSION_CODE" \
          --dart-define=EMAIL_ID="$EMAIL_ID" \
          --dart-define=IS_SPLASH="$IS_SPLASH" \
          --dart-define=SPLASH="$SPLASH" \
          --dart-define=SPLASH_BG="$SPLASH_BG" \
          --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
          --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
          --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
          --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
          --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
          --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
          --dart-define=LOGO_URL="$LOGO_URL" \
          --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
          --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
          --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
          --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
          --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
          --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
          --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
          --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
          --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
          --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
          --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
          --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
          --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
          --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
          --dart-define=IS_CAMERA="$IS_CAMERA" \
          --dart-define=IS_LOCATION="$IS_LOCATION" \
          --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
          --dart-define=IS_MIC="$IS_MIC" \
          --dart-define=IS_CONTACT="$IS_CONTACT" \
          --dart-define=IS_CALENDAR="$IS_CALENDAR" \
          --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
          --dart-define=IS_STORAGE="$IS_STORAGE" \
          --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
          --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
          --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
          --dart-define=KEY_STORE="$KEY_STORE" \
          --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
          --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
          --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD"
          
          # Extract CODE_SIGN_IDENTITY from the .p12 file
          security import signing_cert.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign
          CODE_SIGN_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | awk '{print $2}' | head -n 1)
          echo "CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY"
          
          echo "üõ†Ô∏è Setting UTF-8 encoding for CocoaPods..."
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock ~/Library/Caches/CocoaPods ~/.cocoapods/repos
          sudo gem install cocoapods
          cd ios
          pod reintegrate
          pod install --repo-update
          cd ..
          flutter pub get
          
           # Archive the app
            echo "üì¶ Archiving app with CodeSigning the IPA File..."
            xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/ios/archive/Runner.xcarchive \
            archive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$UUID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY"

            # ExportOptions.plist
            cat <<EOF > ExportOptions.plist
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
            "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>provisioningProfiles</key>
            <dict>
            <key>$BUNDLE_ID</key>
            <string>$UUID</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            </dict>
            </plist>
            EOF

            # Export the IPA
            echo "üì¶ Exporting IPA..."
            xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist ExportOptions.plist

            echo "‚úÖ IPA export complete: build/ios/ipa"
            security delete-keychain "$KEYCHAIN_NAME"
            rm signing_cert.p12 profile.mobileprovision

    - &setup_ios_signing_manual3
      name: Setting Up iOS Signing (Manual)
      script: |
        echo "üîê Setting up iOS signing (manual)..."

        mkdir -p ios_certificates

        echo "‚¨áÔ∏è Downloading .p12 certificate..."
        if [ -z "$CERT_URL" ]; then
        echo "‚ùå CERT_URL is not set."
        exit 1
        fi
        curl -f -o ios_certificates/certificate.p12 "$CERT_URL"
        echo "‚úÖ .p12 certificate downloaded successfully."

        echo "‚¨áÔ∏è Downloading provisioning profile..."
        if [ -z "$PROFILE_URL" ]; then
        echo "‚ùå PROFILE_URL is not set."
        exit 1
        fi
        curl -f -o ios_certificates/profile.mobileprovision "$PROFILE_URL"
        echo "‚úÖ Provisioning profile downloaded successfully."

        echo "üîê Creating and unlocking custom keychain..."
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -lut 21600 build.keychain

        echo "üîê Importing certificate into custom keychain..."
        security import ios_certificates/certificate.p12 -k build.keychain -P "$CERT_PASSWORD" -A -T /usr/bin/codesign -T /usr/bin/security
        security set-key-partition-list -S apple-tool:,apple:,codesign -s -k "" build.keychain
        security list-keychains -s build.keychain
        echo "‚úÖ Certificate imported and trusted for code signing."

        echo "üìã Extracting UUID and Name from provisioning profile..."
        security cms -D -i ios_certificates/profile.mobileprovision -o ios_certificates/profile.plist

        PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" ios_certificates/profile.plist)
        PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" ios_certificates/profile.plist)

        if [ -z "$PROFILE_UUID" ] || [ -z "$PROFILE_NAME" ]; then
        echo "‚ùå Failed to extract UUID or Name from provisioning profile."
        exit 1
        fi

        echo "‚úÖ Profile UUID: $PROFILE_UUID"
        echo "‚úÖ Profile Name: $PROFILE_NAME"

        echo "üîç Validating provisioning profile matches app bundle ID..."

        PROFILE_APP_ID_PREFIX=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" ios_certificates/profile.plist)
        EXPECTED_APP_ID="$APPLE_TEAM_ID.$PKG_NAME"

        if [[ "$PROFILE_APP_ID_PREFIX" != "$EXPECTED_APP_ID" ]]; then
        echo "‚ùå Provisioning profile's App ID ($PROFILE_APP_ID_PREFIX) does not match expected ($EXPECTED_APP_ID)"
        exit 1
        else
        echo "‚úÖ Provisioning profile matches expected bundle ID: $PKG_NAME"
        fi

        echo "üîç Verifying imported code signing identities..."
        security find-identity -v -p codesigning build.keychain

        # Match iPhone Distribution instead of Apple Distribution
        VALID_IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep "iPhone Distribution" | awk '{print $2}')

        if [ -z "$VALID_IDENTITY" ]; then
        echo "‚ùå No valid iPhone Distribution certificate found in the keychain."
        exit 1
        else
        echo "‚úÖ Found valid iPhone Distribution certificate: $VALID_IDENTITY"
        fi
          
          echo "üìù Creating ExportOptions.plist..."
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
          <key>method</key>
          <string>ad-hoc</string>
          <key>signingStyle</key>
          <string>manual</string>
          <key>provisioningProfiles</key>
          <dict>
          <key>$PKG_NAME</key>
          <string>$PROFILE_NAME</string>
          </dict>
          <key>teamID</key>
          <string>$APPLE_TEAM_ID</string>
          </dict>
          </plist>
          EOF
          
          echo "‚úÖ ExportOptions.plist created."

    - &Inject_iOS_Firebase_Push
      name: Setup iOS Firebase push notifications and APNs key
      script: |
        echo "üì¶ Setting up iOS Firebase Push Notifications..."

        if [[ -n "$firebase_config_ios" ]]; then
          echo "üîó Firebase Config URL: $firebase_config_ios"

          if [[ "$firebase_config_ios" =~ ^https:// ]]; then
        
          echo "‚¨áÔ∏è Downloading GoogleService-Info.plist with retry..."
  
          for i in {1..5}; do
          wget -O ios/Runner/GoogleService-Info.plist "$firebase_config_ios" && break
          echo "‚ùå Download failed, retrying in $((2 ** i))s..."
          sleep $((2 ** i))
          done
          
          if [ ! -f ios/Runner/GoogleService-Info.plist ]; then
          echo "‚ùå Failed to download GoogleService-Info.plist after retries"
          exit 1
          fi
        
        
        #            echo "‚¨áÔ∏è Downloading GoogleService-Info.plist..."
        #            wget -O ios/Runner/GoogleService-Info.plist "$firebase_config_ios"
        #            if [ $? -eq 0 ]; then
        #              echo "‚úÖ GoogleService-Info.plist placed in ios/Runner"
        #            else
        #              echo "‚ùå Failed to download GoogleService-Info.plist"
        #              exit 1
        #            fi
          else
            echo "‚ùå Error: Invalid URL format for firebase_config_ios"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è GOOGLE_SERVICE_INFO_PLIST_URL not set, skipping plist injection"
        fi

        if [[ -n "$APNS_AUTH_KEY_URL" && -n "$APNS_KEY_ID" && -n "$APPLE_TEAM_ID" ]]; then
          echo "‚¨áÔ∏è Downloading APNs Auth Key (.p8)..."
          wget -O ios/AuthKey.p8 "$APNS_AUTH_KEY_URL"
          if [ $? -eq 0 ]; then
            echo "‚úÖ APNs Auth Key downloaded to ios/AuthKey.p8"
          else
            echo "‚ùå Failed to download APNs key"
            exit 1
          fi

          echo "üìù APNs Setup:"
          echo "  üîë Key ID: $APNS_KEY_ID"
          echo "  üßë‚Äçüíª Team ID: $APPLE_TEAM_ID"
          echo "  üì¶ File: ios/AuthKey.p8"
        else
          echo "‚ö†Ô∏è Missing APNs credentials, skipping .p8 key setup"
        fi
    - &Update_App_Version22
      name: Inject Version Info into pubspec, build.gradle (Android) & Xcode project (iOS)
      script: |
        # Default values
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-100}"
        # Check if VERSION_NAME is empty or not set
         if [ -z "$VERSION_NAME" ]; then
           VERSION_NAME=$DEFAULT_VERSION_NAME
           echo "üî¢ Setting DEFAULT_VERSION_NAME"
         fi
        
         # Check if VERSION_CODE is empty or not set
         if [ -z "$VERSION_CODE" ]; then
           VERSION_CODE=$DEFAULT_VERSION_CODE
           echo "üî¢ Setting DEFAULT_VERSION_CODE"
         fi
        
         echo "üî¢ VERSION_NAME: $VERSION_NAME"
         echo "üî¢ VERSION_CODE: $VERSION_CODE"
        echo "üîÑ Updating version to ${VERSION_NAME}+${VERSION_CODE}"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ pubspec.yaml ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        sed -i'' -e "s/^version: .*/version: ${VERSION_NAME}+${VERSION_CODE}/" pubspec.yaml
        echo "‚úÖ Updated pubspec.yaml"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android build.gradle ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        echo "üîß Updating Android build.gradle..."
        sed -i'' -e "s/versionCode.*/versionCode ${VERSION_CODE}/" android/app/build.gradle
        sed -i'' -e "s/versionName \".*\"/versionName \"${VERSION_NAME}\"/" android/app/build.gradle
        echo "‚úÖ Android version updated: $VERSION_NAME ($VERSION_CODE)"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS: project.pbxproj ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        echo "üçè Updating iOS version info in project.pbxproj..."
        IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
        
        if [ -f "$IOS_PROJECT_FILE" ]; then
          sed -i'' -e "s/MARKETING_VERSION = .*;/MARKETING_VERSION = ${VERSION_NAME};/" "$IOS_PROJECT_FILE"
          sed -i'' -e "s/CURRENT_PROJECT_VERSION = .*;/CURRENT_PROJECT_VERSION = ${VERSION_CODE};/" "$IOS_PROJECT_FILE"
          echo "‚úÖ iOS version updated: $VERSION_NAME ($VERSION_CODE)"
        else
          echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
          exit 1
        fi

    - &Update_App_Version
      name: Update Version Info (Android & iOS)
      script: |
        # Generate dynamic version code using timestamp (or use default)
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-$(date +%Y%m%d%H%M)}"

        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ pubspec.yaml ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        echo "üîß Updating pubspec.yaml..."
        if grep -q "^version: " pubspec.yaml; then
          sed -i'' -e "s/^version: .*/version: ${VERSION_NAME}+${VERSION_CODE}/" pubspec.yaml
        else
          echo "version: ${VERSION_NAME}+${VERSION_CODE}" >> pubspec.yaml
        fi
        echo "‚úÖ pubspec.yaml version updated."

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android (Kotlin DSL) build.gradle.kts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        BUILD_FILE="android/app/build.gradle.kts"
        if [ -f "$BUILD_FILE" ]; then
          echo "üîß Updating Android version in build.gradle.kts..."
          sed -i'' -E "s/versionCode\s*=\s*[0-9]+/versionCode = ${VERSION_CODE}/" "$BUILD_FILE"
          sed -i'' -E "s/versionName\s*=\s*\"[^\"]+\"/versionName = \"${VERSION_NAME}\"/" "$BUILD_FILE"
          echo "‚úÖ Android version updated in build.gradle.kts"
        else
          echo "‚ùå build.gradle.kts not found at $BUILD_FILE"
          exit 1
        fi

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS project.pbxproj ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
        if [ -f "$IOS_PROJECT_FILE" ]; then
          echo "üîß Updating iOS version in project.pbxproj..."
          sed -i'' -e "s/MARKETING_VERSION = .*;/MARKETING_VERSION = ${VERSION_NAME};/" "$IOS_PROJECT_FILE"
          sed -i'' -e "s/CURRENT_PROJECT_VERSION = .*;/CURRENT_PROJECT_VERSION = ${VERSION_CODE};/" "$IOS_PROJECT_FILE"
          echo "‚úÖ iOS version updated in project.pbxproj"
        else
          echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
          exit 1
        fi


workflows:
  apk-workflow:
    name: Android Workflow Free & Paid APK
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - *change_proj_name
      - *debug_env
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *Update_App_Version
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *build_apk
    artifacts:
      - *android_apk
      - flutter_build_apk.log
    publishing: *email_release

  android-workflow:
    name: Android Workflow
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      flutter: stable
      java: 17
    scripts:
      - name: Make scripts executable (safe)
        script: |
          if [ -d ./scripts ]; then chmod +x ./scripts/*.sh; fi
      - *debug_env
      - name: Inject Keystore and Replace build.gradle.kts
        script: |
            ./scripts/inject_keystore.sh
      - *permission_apk
      - *change_proj_name
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *Update_App_Version
#      - *key_store
      - *get_json
      - *Inject_Firebase_Services
      - *get_logo
      - *get_splash
      - *set_launcher_icons
      - *build_apk_release
      - name: Validate APK Signing
        script: |
          echo "üîç Validating APK signature..."
          $ANDROID_SDK_ROOT/build-tools/*/apksigner verify --verbose build/app/outputs/flutter-apk/app-release.apk
    artifacts:
      - build/**/outputs/apk/**/*.apk
      - build/**/outputs/bundle/**/*.aab
#      - build/**/outputs/mapping/release/mapping.txt
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - $EMAIL_ID
        notify:
          success: true
          failure: true

  ios-workflow:
    name: iOS Workflow
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      flutter: stable
      xcode: latest
      cocoapods: 1.13.0
      vars:
        CERT_CER_URL: $CERT_CER_URL
        CERT_KEY_URL: $CERT_KEY_URL
        CERT_PASSWORD: $CERT_PASSWORD
        KEYCHAIN_PASSWORD: $KEYCHAIN_PASSWORD
        PROFILE_URL: $PROFILE_URL
        BUNDLE_ID: $BUNDLE_ID
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        EMAIL_ID: $EMAIL_ID
        XCODE_WORKSPACE: "ios/Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
    scripts:
      - name: üîê iOS Code Signing Setup
        script: |
          set -euo pipefail
          trap 'echo "‚ùå Error on line $LINENO"' ERR
          
          
          # ‚úÖ Required environment variables
            REQUIRED_VARS=(CERT_CER_URL CERT_KEY_URL CERT_PASSWORD PROFILE_URL KEYCHAIN_PASSWORD CM_BUILD_DIR CM_ENV)
            echo "üîç Validating environment variables..."
            for VAR in "${REQUIRED_VARS[@]}"; do
            [[ -z "${!VAR:-}" ]] && { echo "‚ùå Missing $VAR"; exit 1; }
            echo "‚úÖ $VAR is set"
              done
          
              # üîß Paths
              KEYCHAIN_NAME="ios-build.keychain"
              BUILD_DIR="$CM_BUILD_DIR"
              CERT_CER_PATH="$BUILD_DIR/certificate.cer"
              PRIVATE_KEY_PATH="$BUILD_DIR/private.key"
              P12_PATH="$BUILD_DIR/generated_certificate.p12"
              PROFILE_PATH="$BUILD_DIR/profile.mobileprovision"
          
              mkdir -p "$BUILD_DIR"
          
              echo "üì• Downloading cert, key, and mobileprovision..."
              curl -fsSL -o "$CERT_CER_PATH" "$CERT_CER_URL"
              curl -fsSL -o "$PRIVATE_KEY_PATH" "$CERT_KEY_URL"
              curl -fsSL -o "$PROFILE_PATH" "$PROFILE_URL"
          
              echo "üîê Generating .p12 from cert + key..."
              openssl pkcs12 -export \
              -inkey "$PRIVATE_KEY_PATH" \
              -in "$CERT_CER_PATH" \
              -out "$P12_PATH" \
              -name "Apple Distribution" \
              -certfile "$CERT_CER_PATH" \
              -passout pass:"$CERT_PASSWORD" \
              -legacy
          
              echo "üîê Setting up keychain..."
              security delete-keychain "$KEYCHAIN_NAME" || true
              security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
              security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
              security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          
              echo "üîë Importing .p12..."
              security import "$P12_PATH" -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
            security list-keychains -s "$KEYCHAIN_NAME"
              security default-keychain -s "$KEYCHAIN_NAME"
          
              echo "üì≤ Installing provisioning profile..."
              PROFILE_UUID=$(security cms -D -i "$PROFILE_PATH" | plutil -extract UUID xml1 -o - - | plutil -p - | sed -E 's/.*"([^"]+)".*/\1/')
              PROFILE_NAME=$(security cms -D -i "$PROFILE_PATH" | plutil -extract Name xml1 -o - - | plutil -p - | sed -E 's/.*"([^"]+)".*/\1/')
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp "$PROFILE_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          
              echo "üìõ Extracting CODE_SIGN_IDENTITY from .p12..."
              EXTRACTED_IDENTITY=$(openssl pkcs12 -in "$P12_PATH" -nokeys -legacy -passin pass:"$CERT_PASSWORD" \
              | openssl x509 -noout -subject | sed -n 's/^subject=.*CN=\(.*\)/\1/p')
          
            if [[ -z "$EXTRACTED_IDENTITY" ]]; then
              echo "‚ùå Failed to extract CODE_SIGN_IDENTITY from .p12"
              exit 1
              fi
              CODE_SIGN_IDENTITY="$EXTRACTED_IDENTITY"
          
              echo "‚úÖ PROFILE_UUID=$PROFILE_UUID"
              echo "‚úÖ PROFILE_NAME=$PROFILE_NAME"
              echo "‚úÖ CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY"
          
              # Export to .env for use in xcodebuild
              echo "PROFILE_UUID=$PROFILE_UUID" >> "$CM_ENV"
              echo "PROFILE_NAME=$PROFILE_NAME" >> "$CM_ENV"
              #echo "CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY" >> "$CM_ENV"
              #echo "CODE_SIGN_IDENTITY=\"${CODE_SIGN_IDENTITY}\"" >> "$CM_ENV"
          
            # ‚úÖ CERTIFICATE MATCH VALIDATION
            echo "üîç Validating that provisioning profile matches signing cert..."
          
            PROFILE_PLIST="$BUILD_DIR/profile.plist"
            CERT_DER_PATH="$BUILD_DIR/dev_cert.der"
          
            # Decode .mobileprovision into plist
            security cms -D -i "$PROFILE_PATH" > "$PROFILE_PLIST"
          
            # Extract base64 and decode into DER file using awk (safe for multiline)
            CERT_BASE64=$(plutil -extract DeveloperCertificates.0 xml1 -o - "$PROFILE_PLIST" \
            | awk '/<data>/,/<\/data>/' \
            | sed -e 's/<[^>]*>//g' -e 's/^[ \t]*//' \
            | tr -d '\n')
          
            if [[ -z "$CERT_BASE64" ]]; then
            echo "‚ùå Failed to extract base64 certificate data"
            exit 1
            fi
          
            echo "$CERT_BASE64" | base64 -d > "$CERT_DER_PATH"
          
            # Validate extracted certificate
            if ! openssl x509 -inform der -in "$CERT_DER_PATH" -noout > /dev/null 2>&1; then
            echo "‚ùå Extracted certificate is invalid or unreadable"
            exit 1
            fi
          
            echo "‚úÖ Provisioning profile contains a valid Developer Certificate."
          
            DER_HASH=$(openssl x509 -in "$CERT_DER_PATH" -inform der -noout -sha1 -fingerprint)
            CER_HASH=$(openssl x509 -in "$CERT_CER_PATH" -noout -sha1 -fingerprint)
          
            if [[ "$DER_HASH" != "$CER_HASH" ]]; then
            echo "‚ùå Certificate in profile does NOT match imported .cer"
            echo "DER: $DER_HASH"
            echo "CER: $CER_HASH"
            exit 1
            else
            echo "‚úÖ Certificate matches the .cer used to generate the .p12"
            fi
            echo "üéâ iOS code signing setup completed using .cer + .key (no Mac needed!)"



      - *debug_env
      - name: Make scripts executable (safe)
        script: |
          if [ -d ./scripts ]; then chmod +x ./scripts/*.sh; fi
          if [ -d ./tools/scripts ]; then chmod +x ./tools/scripts/*.sh; fi
      - *permission_ios
      - *change_proj_name
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *Update_App_Version
      - *get_logo
      - *get_splash
      - *set_launcher_icons
      - *Inject_Firebase_iOS_Push
      - name: üì¶ Setup Ruby & CocoaPods
        script: |
          rbenv install 3.3.0 || true
          rbenv global 3.3.0
          gem install cocoapods -v 1.16.2
      - name: üîÑ Clean and reinstall CocoaPods
        script: |
          echo "üì¶ Cleaning and reinstalling CocoaPods..."
          rm -rf ~/Library/Developer/Xcode/DerivedData
          cd ios
          rm -rf Pods Podfile.lock
          pod deintegrate
          pod cache clean --all

          # Workaround for activesupport bug in CocoaPods + Ruby 3.x
          gem uninstall activesupport -a -x || true
          gem install activesupport -v 6.1.7.3

          pod install --repo-update
          cd ..

          echo "üîß Updating Xcode manual signing configuration..."
          cd ios
          ruby <<'RUBY'
          require 'xcodeproj'

          project = Xcodeproj::Project.open('Runner.xcodeproj')
          project.targets.each do |target|
            if target.name == 'Runner'
              target.build_configurations.each do |config|
                config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
                config.build_settings['DEVELOPMENT_TEAM'] = ENV['APPLE_TEAM_ID']
                config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROFILE_NAME']
                config.build_settings['CODE_SIGN_IDENTITY'] = ENV['CODE_SIGN_IDENTITY']
                config.build_settings['CODE_SIGNING_REQUIRED'] = 'YES'
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'YES'
                config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ENV['CODE_SIGN_IDENTITY']
                config.build_settings['CODE_SIGN_INJECT_BASE_ENTITLEMENTS'] = 'YES'
                config.build_settings['CODE_SIGN_ENTITLEMENTS'] = 'Runner/Runner.entitlements'
                config.build_settings['OTHER_CODE_SIGN_FLAGS'] = "--keychain $HOME/Library/Keychains/$KEYCHAIN_NAME-db"
              end
            end
          end

          project.save
          RUBY
          cd ..
#          echo "üßæ Ensuring entitlements file exists..."
#          mkdir -p ios/Runner
#
#          cat > ios/Runner/Runner.entitlements <<EOF_ENTITLEMENTS
#          <?xml version="1.0" encoding="UTF-8"?>
#          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
#          <plist version="1.0">
#          <dict>
#            <key>application-identifier</key>
#            <string>${APPLE_TEAM_ID}.${BUNDLE_ID}</string>
#            <key>keychain-access-groups</key>
#            <array>
#              <string>${APPLE_TEAM_ID}.*</string>
#            </array>
#            <key>get-task-allow</key>
#            <false/>
#          EOF_ENTITLEMENTS
#
#          # Conditionally add push notification entitlement
#          if [ "$PUSH_NOTIFY" == "true" ]; then
#            echo "  <key>aps-environment</key>" >> ios/Runner/Runner.entitlements
#            echo "  <string>production</string>" >> ios/Runner/Runner.entitlements
#            echo "üîî PUSH_NOTIFY enabled ‚Äî added aps-environment: production"
#          else
#            echo "üö´ PUSH_NOTIFY is not true ‚Äî skipping aps-environment"
#          fi
#
#          # Close the plist
#          cat >> ios/Runner/Runner.entitlements <<EOF_END
#          </dict>
#          </plist>
#          EOF_END
##
##          echo "üßæ Ensuring entitlements file exists..."
##          mkdir -p ios/Runner
##          cat > ios/Runner/Runner.entitlements <<EOF_ENTITLEMENTS
##          <?xml version="1.0" encoding="UTF-8"?>
##          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
##          <plist version="1.0">
##          <dict>
##            <key>application-identifier</key>
##            <string>${APPLE_TEAM_ID}.${BUNDLE_ID}</string>
##            <key>keychain-access-groups</key>
##            <array>
##              <string>${APPLE_TEAM_ID}.*</string>
##            </array>
##            <key>get-task-allow</key>
##            <false/>
##          </dict>
##          </plist>
##          EOF_ENTITLEMENTS

      - name: Add Push Notification entitlements if enabled
        script: |
          chmod +x scripts/generate_entitlements.sh
          ./scripts/generate_entitlements.sh



      

      - name: üìù Inject dynamic Podfile
        script: |
          ./tools/scripts/generate_podfile.sh


      - name: üì¶ Install CocoaPods
        script: |
          rm -rf ios/Pods ios/Podfile.lock ~/Library/Caches/CocoaPods ~/.cocoapods/repos
          cd ios
          pod install --repo-update
          cd ..

      - name: Generate ExportOptions Build
        script: |
          echo "‚úÖ Creating ExportOptions.plist:"
            cat > ExportOptions.plist <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store-connect</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>$BUNDLE_ID</key>
                <string>$PROFILE_NAME</string>
              </dict>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>signingCertificate</key>
              <string>$CODE_SIGN_IDENTITY</string>
            </dict>
            </plist>
            EOF

      - name: üîß Inject Pods xcconfig into Release.xcconfig
        script: |
          XC_CONFIG_PATH="ios/Flutter/Release.xcconfig"
          PODS_INCLUDE_LINE='#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"'
          if grep -Fxq "$PODS_INCLUDE_LINE" "$XC_CONFIG_PATH"; then
            echo "‚úÖ Already included"
          else
            echo -e "\n$PODS_INCLUDE_LINE" >> "$XC_CONFIG_PATH"
            echo "‚úÖ Appended $PODS_INCLUDE_LINE"
          fi
      - name: üß© Flutter Build IOS
        script: |
          set -euo pipefail
          trap 'echo "‚ùå Flutter build failed on line $LINENO"; exit 1' ERR
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock
          cd ios && pod install && cd ..
          flutter build ios --release --no-codesign \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
            --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
            --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
            --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=IS_CHATBOT="$IS_CHATBOT" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" \
            --dart-define=CERT_PASSWORD="$CERT_PASSWORD" \
            --dart-define=PROFILE_URL="$PROFILE_URL" \
            --dart-define=CERT_CER_URL="$CERT_CER_URL" \
            --dart-define=CERT_KEY_URL="$CERT_KEY_URL" \
            --dart-define=APP_STORE_CONNECT_KEY_IDENTIFIER="$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios"

      - name: üìù Inject dynamic Podfile for xcodebuild
        script: |
          ./tools/scripts/generate_podfile_xcodebuild.sh

      - name: Clean DerivedData
        script: |
          rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: üèó Archive iOS App with Xcode
        script: |
  
              set -euo pipefail
              trap 'echo "‚ùå Flutter build failed on line $LINENO"; exit 1' ERR
              
              echo "üì• Parsing environment from \$CM_ENV"
              while IFS='=' read -r key value; do
              key=$(echo "$key" | xargs)
              value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//' | xargs)
              if [[ -n "$key" ]]; then
              export "$key=$value"
              fi
              done < "$CM_ENV"
              
              # Debug output
              echo "‚úÖ PROFILE_UUID=$PROFILE_UUID"
              echo "‚úÖ PROFILE_NAME=$PROFILE_NAME"
              echo "‚úÖ APPLE_TEAM_ID=$APPLE_TEAM_ID"
              echo "‚úÖ BUNDLE_ID=$BUNDLE_ID"
              
              cd ios
              
              echo "üöÄ Starting Xcode archive..."
          
              xcodebuild -workspace Runner.xcworkspace \
                -scheme Runner \
                -archivePath "$CM_BUILD_DIR/Runner.xcarchive" \
                -sdk iphoneos \
                -configuration Release \
                archive \
                -allowProvisioningUpdates
              
              cd ..
              
              echo "‚úÖ Archive completed successfully"
      - name: üì¶ Export signed IPA
        script: |
          set -euo pipefail
          trap 'echo "‚ùå Flutter build failed on line $LINENO"; exit 1' ERR
          echo "‚úÖ Start Exporting:"
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/Runner.xcarchive" \
            -exportPath "$CM_BUILD_DIR/ios_output" \
            -exportOptionsPlist ExportOptions.plist
          
          echo "üì¶ Contents of output directory:"
          ls -lh "$CM_BUILD_DIR/ios_output"
      
          IPA_PATH="$CM_BUILD_DIR/ios_output/Runner.ipa"
          if [[ -f "$IPA_PATH" ]]; then
          echo "‚úÖ IPA generated at: $IPA_PATH"
          else
          echo "‚ùå IPA file was not generated!"
          exit 0
          fi

#      - name: Upload to TestFlight
#        script: |
#          echo "üì• Loading environment from $CM_ENV"
#          set -a
#          source "$CM_ENV"
#          set +a
#               echo "‚úÖ PROFILE_UUID=$PROFILE_UUID"
#               echo "‚úÖ PROFILE_NAME=$PROFILE_NAME"
#               #echo "‚úÖ CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY"
#          xcrun altool --upload-app \
#            --type ios \
#            --file build/ios_output/Runner.ipa \
#            --apiKey "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
#            --apiIssuer "$PROFILE_UUID"
    artifacts:
      - build/ios_output/Runner.ipa
      - build/ios/ipa/*.ipa
      - build/ios/archive/Runner.xcarchive
      - flutter_build_ios.log
      - build/ios/iphoneos/Runner.app
      - $CM_BUILD_DIR/ios_output/*.ipa
      - $CM_BUILD_DIR/*.p12
      - $CM_BUILD_DIR/*.*
      - $CM_BUILD_DIR/ios_output/*.*
      - /tmp/xcodebuild_logs/*.log
    #      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    #    artifacts:
    #      - build/ios/iphoneos/Runner.app
    #      - build/ios/ipa/*.ipa
    #      - /tmp/xcodebuild_logs/*.log
    #      - flutter_build_ios.log
    #      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      email:
        recipients:
          - $EMAIL_ID
        notify:
          success: true
          failure: true


  ios-and-android-workflow:
    name: iOS and Android Workflow
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - *change_proj_name
      - *debug_env
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *Update_App_Version
      - *key_store
      - *get_json
      - *Inject_Firebase_Services
      - *get_logo
      - *get_splash
      - *set_launcher_icons
      - *build_apk_release
      - *Inject_iOS_Firebase_Push
      - name: Set up environment and code signing
        script: |
          # Create a new keychain
          KEYCHAIN_NAME="build.keychain"
          KEYCHAIN_PASSWORD="temporary"

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

          # Download and import certificate
          curl -o certificate.p12 "$CERT_URL"
          security import certificate.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"

          # Download and set up provisioning profile
          curl -o profile.mobileprovision "$PROFILE_URL"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

          # Extract profile info
          PROFILE_PLIST=$(mktemp)
          security cms -D -i profile.mobileprovision > "$PROFILE_PLIST"
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$PROFILE_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$PROFILE_PLIST")

          # Install profile
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$UUID".mobileprovision

          # Export variables for later use
          echo "PROFILE_NAME=$PROFILE_NAME" >> $CM_ENV
          echo "PROFILE_UUID=$UUID" >> $CM_ENV

      - name: Update iOS configuration
        script: |
          cd ios

          # Update minimum iOS version in Podfile
          echo "platform :ios, '13.0'" > Podfile.new
          tail -n +2 Podfile >> Podfile.new
          mv Podfile.new Podfile

          # Update project settings
          sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = .*/IPHONEOS_DEPLOYMENT_TARGET = 13.0;/g' Runner.xcodeproj/project.pbxproj

          # Clean and setup pods
          rm -rf Pods Podfile.lock
          pod repo update
          pod install --repo-update
          cd ..

      - name: Build Flutter app
        script: |
          # Clean everything first
          flutter clean
          
          # Get dependencies and generate necessary files
          flutter pub get
          
          # Setup iOS specific files
          flutter precache --ios
          
          # Generate Flutter framework files
          cd ios
          rm -rf Pods Podfile.lock
          rm -rf .symlinks/
          rm -rf Flutter/Flutter.framework
          rm -rf Flutter/Flutter.podspec
          cd ..
          
          flutter build ios-framework --no-profile --no-release
          
          # Setup pods
          cd ios
          pod deintegrate || true
          pod cache clean --all
          pod repo update
          pod install --repo-update --verbose
          cd ..
          
          # Build the app
          flutter build ios --release --no-codesign \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=IS_CHATBOT="$IS_CHATBOT" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" || {
              echo "‚ùå Failed to build Flutter app"
              exit 1
            }

      - name: Archive and export IPA
        script: |
          cd ios

          # Load profile info from environment
          source $CM_ENV

          # Create exportOptions.plist
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_NAME</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
          </dict>
          </plist>
          EOF

          # Archive
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            clean archive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            IPHONEOS_DEPLOYMENT_TARGET=13.0 \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_NAME" || {
              echo "‚ùå Failed to archive iOS app"
              exit 1
            }

          # Export IPA
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist exportOptions.plist \
            -allowProvisioningUpdates || {
              echo "‚ùå Failed to export IPA"
              exit 1
            }

          # Cleanup
          security delete-keychain "$KEYCHAIN_NAME" || true
          rm -f certificate.p12 profile.mobileprovision exportOptions.plist

    artifacts:
      - *android_apk
      - *android_abb
      - build/ios/iphoneos/Runner.app
      - build/ios/ipa/*.ipa
      - flutter_build_apk.log
      - flutter_build_aab.log
    publishing: *email_release

  android-free-workflow:
    name: Android Free APK Workflow
    max_build_duration: 120
    environment:
      java: 17
      vars:
        PUSH_NOTIFY: "false"
    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Get Flutter packages
        script: |
          flutter pub get
      - name: Build Free APK
        script: |
          flutter build apk --release \
            --dart-define=PUSH_NOTIFY=false \
            --dart-define=APP_NAME="$APP_NAME Free"
    artifacts:
      - build/**/outputs/**/*.apk

  android-paid-workflow:
    name: Android Paid APK/AAB Workflow
    max_build_duration: 120
    environment:
      java: 17
      vars:
        PUSH_NOTIFY: "true"
    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Get Flutter packages
        script: |
          flutter pub get
      - name: Setup Firebase
        script: |
          if [ -n "$firebase_config_android" ]; then
            mkdir -p android/app
            wget -O android/app/google-services.json "$firebase_config_android"
            if [ ! -f android/app/google-services.json ]; then
              echo "‚ùå Failed to download google-services.json"
              exit 1
            fi
          fi
      - name: Build Paid APK and AAB
        script: |
          flutter build apk --release \
            --dart-define=PUSH_NOTIFY=true
          flutter build appbundle --release \
            --dart-define=PUSH_NOTIFY=true
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab

  combined-workflow:
    name: Combined Release Workflow
    triggering:
      events:
        - tag
      branch_patterns:
        - pattern: release/*
          include: true
          source: true
    environment:
      java: 17
      xcode: latest
      cocoapods: default
    scripts:
      - name: Build all variants
        script: |
          # Build free Android APK
          flutter build apk --release --dart-define=PUSH_NOTIFY=false
          
          # Build paid Android APK/AAB with Firebase
          if [ -n "$firebase_config_android" ]; then
            mkdir -p android/app
            wget -O android/app/google-services.json "$firebase_config_android"
            flutter build apk --release --dart-define=PUSH_NOTIFY=true
            flutter build appbundle --release --dart-define=PUSH_NOTIFY=true
          fi
          
          # Build iOS
          if [ -n "$firebase_config_ios" ]; then
            curl -o ios/Runner/GoogleService-Info.plist "$firebase_config_ios"
          fi
          
          cd ios
          pod install
          cd ..
          
          flutter build ios --release --no-codesign
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/ios/ipa/*.ipa
